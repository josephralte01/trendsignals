import React, { useEffect, useState } from 'react';
import Head from 'next/head';
import { useSession, signIn } from 'next-auth/react';
// import Navbar from '../components/Navbar'; // Assuming you have a Navbar component
// import Footer from '../components/Footer'; // Assuming you have a Footer component

// IMPORTANT: These plan IDs are placeholders.
// You MUST replace them with the actual Plan IDs generated by Razorpay
// after running the `npm run setup:plans` script and noting the output.
const SUBSCRIPTION_PLANS = [
  {
    id: 'plan_xxxxxxxxxxxxxx', // REPLACE with actual Plan ID from Razorpay
    name: 'Monthly Basic Plan',
    price: 999, // Price in major currency unit (e.g., INR)
    currency: 'INR',
    description: 'Basic monthly subscription with standard features.',
  },
  {
    id: 'plan_yyyyyyyyyyyyyy', // REPLACE with actual Plan ID from Razorpay
    name: 'Monthly Premium Plan',
    price: 1999, // Price in major currency unit (e.g., INR)
    currency: 'INR',
    description: 'Premium monthly subscription with advanced features.',
  },
];

const ONE_TIME_PAYMENT_OPTIONS = [
  {
    id: 'onetime_basic_report',
    name: 'Basic Report',
    amount: 499, // Amount in major currency unit
    currency: 'INR',
    description: 'Get a one-time basic cryptocurrency report.',
  },
];

export default function PricingPage() {
  const { data: session, status } = useSession();
  const [loading, setLoading] = useState(false);
  const [paymentError, setPaymentError] = useState(null);

  // Function to load Razorpay script
  const loadRazorpayScript = () => {
    return new Promise((resolve) => {
      if (document.getElementById('razorpay-checkout-js')) {
        resolve(true);
        return;
      }
      const script = document.createElement('script');
      script.id = 'razorpay-checkout-js';
      script.src = 'https://checkout.razorpay.com/v1/checkout.js';
      script.onload = () => resolve(true);
      script.onerror = () => resolve(false);
      document.body.appendChild(script);
    });
  };

  const handleOneTimePayment = async (item) => {
    setLoading(true);
    setPaymentError(null);

    const scriptLoaded = await loadRazorpayScript();
    if (!scriptLoaded) {
      setPaymentError('Failed to load Razorpay SDK. Please try again.');
      setLoading(false);
      return;
    }

    try {
      const res = await fetch('/api/razorpay/create-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ amount: item.amount, currency: item.currency, receipt: `receipt_${item.id}_${Date.now()}` }),
      });

      const data = await res.json();
      if (!res.ok) {
        throw new Error(data.error || 'Failed to create order.');
      }

      const { orderId, keyId, amount, currency } = data;

      const options = {
        key: keyId,
        amount: amount, // Amount is in currency subunits. Default currency is INR.
        currency: currency,
        name: 'CryptoGuard - One Time Payment',
        description: item.name,
        order_id: orderId,
        handler: async function (response) {
          // alert(`Payment successful! Payment ID: ${response.razorpay_payment_id}`);
          // alert(`Order ID: ${response.razorpay_order_id}`);
          // alert(`Signature: ${response.razorpay_signature}`);
          // Here, you would typically call your verify-payment endpoint
          try {
            const verifyRes = await fetch('/api/razorpay/verify-payment', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                razorpay_payment_id: response.razorpay_payment_id,
                razorpay_order_id: response.razorpay_order_id,
                razorpay_signature: response.razorpay_signature,
              }),
            });
            const verifyData = await verifyRes.json();
            if (verifyRes.ok && verifyData.verified) {
              alert('Payment verified and successful! You will be redirected.');
              // Redirect to a success page or update UI
              // window.location.href = '/payment-success?payment_id=' + response.razorpay_payment_id;
            } else {
              throw new Error(verifyData.error || 'Payment verification failed.');
            }
          } catch (verifyErr) {
            console.error('Verification error:', verifyErr);
            setPaymentError(verifyErr.message);
            alert(`Payment verification failed: ${verifyErr.message}. Please contact support.`);
          }
        },
        prefill: {
          name: session?.user?.name || '',
          email: session?.user?.email || '',
          // contact: '9999999999' // Optional
        },
        notes: {
          address: 'Your Company Address',
          item_id: item.id,
        },
        theme: {
          color: '#3399cc',
        },
      };

      const rzp = new window.Razorpay(options);
      rzp.on('payment.failed', function (response) {
        console.error('Razorpay Payment Failed:', response.error);
        setPaymentError(`Payment Failed: ${response.error.description} (Reason: ${response.error.reason})`);
        alert(`Payment Failed: ${response.error.description}. Please try again or contact support.`);
      });
      rzp.open();

    } catch (error) {
      console.error('Payment initiation error:', error);
      setPaymentError(error.message);
      alert(`Error: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const handleSubscription = async (plan) => {
    setLoading(true);
    setPaymentError(null);

    if (status === 'unauthenticated') {
      alert('Please sign in to subscribe.');
      signIn(); // Redirect to sign-in page
      setLoading(false);
      return;
    }
    if (status === 'loading') {
        alert('Session still loading, please wait and try again.');
        setLoading(false);
        return;
    }


    const scriptLoaded = await loadRazorpayScript();
    if (!scriptLoaded) {
      setPaymentError('Failed to load Razorpay SDK. Please try again.');
      setLoading(false);
      return;
    }

    if (plan.id.includes('xxxx') || plan.id.includes('yyyy')) {
        alert('Placeholder Plan ID detected. Please replace with actual Plan ID from Razorpay in the code.');
        console.warn("Placeholder Plan ID detected. Replace with actual Plan ID from Razorpay in `pages/pricing.js`.")
        setPaymentError('Configuration error: Plan ID is a placeholder.');
        setLoading(false);
        return;
    }

    try {
      const res = await fetch('/api/razorpay/create-subscription', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ plan_id: plan.id }),
      });

      const data = await res.json();
      if (!res.ok) {
        throw new Error(data.error || 'Failed to create subscription.');
      }

      const { subscriptionId, keyId } = data;

      const options = {
        key: keyId,
        subscription_id: subscriptionId,
        name: 'CryptoGuard Subscription',
        description: plan.name,
        handler: function (response) {
          // This handler is called when the subscription is successfully created (first payment authorized).
          // Webhooks should be used to manage the subscription lifecycle (activation, subsequent payments, etc.)
          alert(`Subscription initiated successfully! Payment ID: ${response.razorpay_payment_id}. Subscription ID: ${response.razorpay_subscription_id}. You will be redirected.`);
          // Redirect or update UI. The backend webhook will handle DB updates.
          // window.location.href = '/subscription-success?subscription_id=' + response.razorpay_subscription_id;
        },
        prefill: {
          name: session?.user?.name || '',
          email: session?.user?.email || '',
        },
        notes: {
          plan_name: plan.name,
        },
        theme: {
          color: '#3399cc',
        },
      };

      const rzp = new window.Razorpay(options);
      rzp.on('payment.failed', function (response) {
         // This event is fired when the first payment for the subscription fails.
        console.error('Razorpay Subscription Payment Failed:', response.error);
        setPaymentError(`Subscription Payment Failed: ${response.error.description} (Reason: ${response.error.reason})`);
        alert(`Subscription Payment Failed: ${response.error.description}. Please try again or contact support.`);
      });
      rzp.open();

    } catch (error) {
      console.error('Subscription initiation error:', error);
      setPaymentError(error.message);
      alert(`Error: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Head>
        <title>Pricing - CryptoGuard</title>
        <meta name="description" content="Choose a plan that works for you." />
        {/* Script for Razorpay Checkout will be loaded dynamically by loadRazorpayScript */}
      </Head>

      {/* <Navbar /> */}

      <div style={{ padding: '2rem', fontFamily: 'Arial, sans-serif', maxWidth: '1200px', margin: '0 auto' }}>
        <h1>Our Pricing Plans</h1>
        <p>Select the best plan for your cryptocurrency tracking needs.</p>

        {paymentError && <p style={{ color: 'red' }}>Error: {paymentError}</p>}

        <h2>Subscription Plans</h2>
        <div style={{ display: 'flex', gap: '1rem', flexWrap: 'wrap' }}>
          {SUBSCRIPTION_PLANS.map((plan) => (
            <div key={plan.id} style={{ border: '1px solid #ccc', padding: '1rem', borderRadius: '8px', width: '300px' }}>
              <h3>{plan.name}</h3>
              <p style={{ fontSize: '1.5rem', fontWeight: 'bold' }}>
                {plan.currency} {plan.price} / month
              </p>
              <p>{plan.description}</p>
              <button
                onClick={() => handleSubscription(plan)}
                disabled={loading || status === 'loading'}
                style={{ padding: '0.5rem 1rem', backgroundColor: '#0070f3', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}
              >
                {loading ? 'Processing...' : 'Subscribe'}
              </button>
            </div>
          ))}
        </div>

        <h2 style={{marginTop: "2rem"}}>One-Time Purchases</h2>
        <div style={{ display: 'flex', gap: '1rem', flexWrap: 'wrap' }}>
          {ONE_TIME_PAYMENT_OPTIONS.map((item) => (
            <div key={item.id} style={{ border: '1px solid #ccc', padding: '1rem', borderRadius: '8px', width: '300px' }}>
              <h3>{item.name}</h3>
              <p style={{ fontSize: '1.5rem', fontWeight: 'bold' }}>
                {item.currency} {item.amount}
              </p>
              <p>{item.description}</p>
              <button
                onClick={() => handleOneTimePayment(item)}
                disabled={loading}
                style={{ padding: '0.5rem 1rem', backgroundColor: '#0070f3', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}
              >
                {loading ? 'Processing...' : 'Buy Now'}
              </button>
            </div>
          ))}
        </div>

      </div>
      {/* <Footer /> */}
    </>
  );
}
